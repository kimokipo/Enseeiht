/**
 *  \author Xavier Crégut <nom@n7.fr>
 *  \file file.c
 *
 *  Objectif :
 *	Implantation des opérations de la file
*/

#include <malloc.h>
#include <assert.h>

#include "file.h"


void initialiser(File *f)
{
    f->tete=malloc(sizeof(Cellule));
    f->tete=NULL;
    f->queue=malloc(sizeof(Cellule));
    f->queue=f->tete;
    assert(est_vide(*f));
}


void detruire(File *f)
{
    free(f->tete);
    free(f->queue);
}


char tete(File f)
{
    assert(! est_vide(f));
    return (f.tete)->valeur;
}


bool est_vide(File f)
{
    return (f.tete==NULL) && (f.queue==NULL);
}

/**
 * Obtenir une nouvelle cellule allouée dynamiquement
 * initialisée avec la valeur et la cellule suivante précisé en paramètre.
 */
static Cellule * cellule(char valeur, Cellule *suivante)
{
    Cellule *cellule=malloc(sizeof(Cellule));
    cellule->valeur=valeur;
    cellule->suivante=suivante;
    return cellule;
}


void inserer(File *f, char v)
{
    assert(f != NULL);
    (f->queue)->suivante=cellule(v,NULL);
}

void extraire(File *f, char *v)
{
    assert(f != NULL);
    assert(! est_vide(*f));
    *v=(f->tete)->valeur;
    Cellule * curseur=malloc(sizeof(Cellule));
    curseur=f->tete;
    f->tete=(f->tete)->suivante;
    free(curseur);
}


int longueur(File f)
{
    Cellule * curseur=malloc(sizeof(Cellule));
    curseur=f.tete;
    int longueur=0;
    while(curseur!=NULL){
        longueur++;
        curseur=curseur->suivante;
    }
    return longueur;
}
