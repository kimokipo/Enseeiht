import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.Border;

import java.awt.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.*;

/** Programmation de l'interface du maitre du jeu avec une interface graphique Swing.
  *
  *
  * @author    Kamal Hammi
  * @version    $Version: 1.0 $
  */

public class  MaitreJeuSwing {

    
    

// Choix de rÃ©alisation :
// ----------------------
//

    private ModeleMaitreJeu modele;    // le modÃ¨le du maitre de jeu.

//  Les Ã©lÃ©ments de la vue (IHM)
//  ----------------------------

    /** FenÃªtre principale */
    private JFrame fenetre;

    private  HashMap<ModeleFichePersonnage,FichePersonnageSwing> listModeleFichesSwing = new HashMap<ModeleFichePersonnage,FichePersonnageSwing>();
	
    /** Bouton pour Modifier l'image du joueur */
    private final JButton boutonModifierImage = new JButton("Modifier");

    private final JButton boutonCreerFiche = new JButton("Creer fiche");
	
    private final JButton boutonOK = new JButton("OK");
    /** Bouton pour Imprimer la fiche */
    private final JButton boutonImprimerFiche = new JButton("Imprimer fiche");

    private JTextField nomTexte = new JTextField(6);
    private JTextField roleTexte = new JTextField(6);
    private JTextField vitalite = new JTextField(6);
    //private JLabel vieValeur = new JLabel();
    private JProgressBar vieValeur = new JProgressBar(0, 100);
    /** Image du jouer */
    private final JLabel image= new JLabel();

    private JTextField capacite = new JTextField(6);
    private JTextField ajouterInventaire = new JTextField(6);
    private JTextField supprimerInventaire = new JTextField(6);

    private Container contenu21 = new Container();
    private JLabel contenu22 = new JLabel();
// Le constructeur
// ---------------

    /** Construire l'interface du maitre du jeu */
    public MaitreJeuSwing() {
        this(new ModeleMaitreJeu());
    }

    /** Construire l'interface du maitre du jeu */
    public MaitreJeuSwing(ModeleMaitreJeu modele) {
        // Initialiser le modÃ¨le
        this.modele = modele;

        final JLabel nom = new JLabel("Nom");
         
        final JLabel role = new JLabel("Role");
    
        final JLabel vie = new JLabel("Vie");
        
        final JLabel capacites = new JLabel("Capacités");
        final JLabel inventaire= new JLabel("Inventaire");
        
        

        // Construire la vue (prÃ©sentation)
        //    DÃ©finir la fenÃªtre principale
        this.fenetre = new JFrame("Joueur");
        this.fenetre.setLocation(100, 200);

        JPanel contenuPrincipale = new JPanel();
        contenuPrincipale.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        this.fenetre.setContentPane(contenuPrincipale);


        Container contenuHaut = new Container();
        Container contenuBas = new Container();

        contenuPrincipale.setLayout (new BoxLayout(contenuPrincipale, BoxLayout.PAGE_AXIS));

        contenuPrincipale.add(contenuHaut);
        contenuPrincipale.add(Box.createRigidArea(new Dimension(1, 30)));
        contenuPrincipale.add(contenuBas);

        GridLayout gl = new GridLayout(1, 2);
        gl.setHgap(20);
        contenuHaut.setLayout (gl);

        Container contenu1 = new Container();
        Container contenu2 = new Container();

        contenuHaut.add(contenu1);
        contenuHaut.add(contenu2);

        contenu1.setLayout (new BoxLayout(contenu1, BoxLayout.PAGE_AXIS));
        contenu2.setLayout (new BoxLayout(contenu2, BoxLayout.PAGE_AXIS));
        
        Container contenuImage = new Container();
        contenuImage.setLayout(new FlowLayout());
        contenuImage.add(boutonModifierImage);

        // Afficher une image par défaut.
        image.setIcon(Utils.loadImage(new File("dauphin-bebou.jpg")));
        image.setAlignmentX(Component.CENTER_ALIGNMENT);
        contenu1.add(image);
        contenu1.add(contenuImage);
        contenu1.add(Box.createVerticalStrut(10));

        Container contenu11 = new Container();
        Container contenu12 = new Container();

        contenu1.add(contenu11);
        contenu1.add(contenu12);

        contenu11.setLayout (new GridLayout(1,2));
        contenu12.setLayout (new GridLayout(1,2));

        contenu11.add(nom);
        contenu11.add(nomTexte);
        contenu12.add(role);
        contenu12.add(roleTexte);

        Container contenuFiche = new Container();
        contenuFiche.setLayout(new FlowLayout());
        //contenuFiche.add(boutonImprimerFiche);
        contenu1.add(contenuFiche);

        Container contenuVie = new Container();
        contenuVie.setLayout (new FlowLayout());

        //contenuVie.add(vie);
        vieValeur.setValue(10);
        vieValeur.setStringPainted(true);
        vieValeur.setString("Vie");
        //contenuVie.add(vieValeur);

        contenu2.add(Box.createVerticalStrut(10));
        contenu2.add(vieValeur);

        Border blackline = BorderFactory.createLineBorder(Color.black);
        JPanel panel = new JPanel();
        panel.setLayout(new FlowLayout());
        panel.setBorder(blackline);
        panel.add(contenu21); 
        
        capacites.setAlignmentX(Component.CENTER_ALIGNMENT);
        contenu2.add(capacites);
        //contenu2.add(contenu21);
        contenu2.add(panel);

        panel = new JPanel();
        panel.setLayout(new FlowLayout());
        panel.setBorder(blackline);
        panel.add(contenu22);
        inventaire.setAlignmentX(Component.CENTER_ALIGNMENT);
        contenu2.add(inventaire);
        contenu2.add(panel);


        // ContenuBas
        Container contenuBas1 = new Container();

		contenuBas.setLayout(new BoxLayout(contenuBas, BoxLayout.PAGE_AXIS));
		contenuBas.add(contenuBas1);

		Container contenuBas2 = new Container ();
		contenuBas.add(contenuBas2);
	
		//contenuBas2.setLayout (new GridLayout(1,2));
		contenuBas2.setLayout(new FlowLayout());
		contenuBas2.add(boutonOK);
		contenuBas2.add(boutonCreerFiche);
        contenuBas1.setLayout (new GridLayout(4,2));

        //contenuBas1.add(new JLabel("Modifier la vitalité"));
        //contenuBas1.add(vitalite);

        contenuBas1.add(new JLabel("Ajouter capacité"));
        contenuBas1.add(capacite);

        contenuBas1.add(new JLabel("Ajouter à l’inventaire"));
        contenuBas1.add(ajouterInventaire);

        contenuBas1.add(new JLabel ("Supprimer de l’inventaire   "));
        contenuBas1.add(supprimerInventaire);

        // Construire le contrÃ´leur (gestion des Ã©vÃ©nements)
        this.boutonModifierImage.addActionListener(new ActionModifierImage());
        this.boutonOK.addActionListener(new ActionModifier());
        this.boutonCreerFiche.addActionListener(new ActionCreerFiche());

        this.vieValeur.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                double pourcentage = ((double)e.getX())/vieValeur.getWidth();
                vieValeur.setValue((int)(pourcentage*100));
            }
        });

        this.fenetre.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // afficher la fenÃªtre
        this.fenetre.pack();            // redimmensionner la fenÃªtre
        this.fenetre.setVisible(true);    // l'afficher
	}

// Quelques rÃ©actions aux interactions de l'utilisateur
// ----------------------------------------------------
    public class ActionModifierImage implements ActionListener {
        public void actionPerformed(ActionEvent evt) {
            modifierImage();
        }
    }
	
    public class ActionModifier implements ActionListener {
        public void actionPerformed(ActionEvent evt) {
            modifierVie();
            modifierCapacites();
            modifierInventaire();
        }
    }

     public class ActionCreerFiche implements ActionListener {
        public void actionPerformed(ActionEvent evt) {
        if (nomTexte.getText().length() > 0) {
            ModeleFichePersonnage modeleFiche = new ModeleFichePersonnage(nomTexte.getText(),roleTexte.getText(),
            String.valueOf(vieValeur.getValue()),modele.getInventaire());
		for(Map.Entry<String,JTextField> e : modele.getCapacites().entrySet()){
		    modeleFiche.ajouterCapacite(e.getKey(),e.getValue().getText());
		}
		for(Map.Entry<ModeleFichePersonnage,FichePersonnageSwing> e : listModeleFichesSwing.entrySet()){
			if(e.getKey().estEgale(modeleFiche) | e.getKey().getNom().equals(nomTexte.getText())){
				e.getValue().getfenetre().setVisible(false);
				break;
			}
		}
		
		listModeleFichesSwing.put(modeleFiche,new FichePersonnageSwing(modeleFiche));		
            
        }
        }
    }


	
    /** Modifier l’image du joueur. */
    public void modifierImage() {
        ImageIcon icon = Utils.telechargerImage(this.fenetre);
        if (icon == null)
            return;

        this.image.setIcon(icon);
    }

    public void modifierVie(){
        /*if(!vieValeur.getText().equals(vitalite.getText())){
            try {
                int vie = Integer.parseInt(vitalite.getText());
                vieValeur.setText(vitalite.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(fenetre, "Donnez un entier pour la vie");
            }
        }*/
    }

    public void modifierCapacites() {
        if(!capacite.getText().equals("")){
            modele.ajouterCapacite(capacite.getText());
            contenu21.removeAll(); 
            contenu21.setLayout (new GridLayout(modele.getCapacites().size(),2));
            for(Map.Entry<String,JTextField> e : modele.getCapacites().entrySet()){
                contenu21.add(new JLabel(e.getKey()));
                contenu21.add(e.getValue());
            }
        }
    }

	
    public void modifierInventaire(){
	if(!ajouterInventaire.getText().equals("")){
		modele.ajouterInventaire(ajouterInventaire.getText());
		
    	}
	if (!supprimerInventaire.getText().equals("")){
		modele.supprimerInventaire(supprimerInventaire.getText());
	}
	contenu22.setText(modele.getInventaire());
    }

// La mÃ©thode principale
// ---------------------

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MaitreJeuSwing();
            }
        });
    }
}

