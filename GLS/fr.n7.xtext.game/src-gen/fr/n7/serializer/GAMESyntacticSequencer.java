/*
 * generated by Xtext 2.23.0
 */
package fr.n7.serializer;

import com.google.inject.Inject;
import fr.n7.services.GAMEGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class GAMESyntacticSequencer extends AbstractSyntacticSequencer {

	protected GAMEGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Action_ConnaissanceProduitsKeyword_4_0_q;
	protected AbstractElementAlias match_Action_ObjetsConsommesKeyword_2_0_q;
	protected AbstractElementAlias match_Action_ObjetsProduitsKeyword_3_0_q;
	protected AbstractElementAlias match_Action___ConnaissanceProduitsKeyword_4_0_or___ObjetsProduitsKeyword_3_0_ConnaissanceProduitsKeyword_4_0____q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GAMEGrammarAccess) access;
		match_Action_ConnaissanceProduitsKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getActionAccess().getConnaissanceProduitsKeyword_4_0());
		match_Action_ObjetsConsommesKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getActionAccess().getObjetsConsommesKeyword_2_0());
		match_Action_ObjetsProduitsKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getActionAccess().getObjetsProduitsKeyword_3_0());
		match_Action___ConnaissanceProduitsKeyword_4_0_or___ObjetsProduitsKeyword_3_0_ConnaissanceProduitsKeyword_4_0____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getActionAccess().getObjetsProduitsKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getActionAccess().getConnaissanceProduitsKeyword_4_0())), new TokenAlias(false, false, grammarAccess.getActionAccess().getConnaissanceProduitsKeyword_4_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Action_ConnaissanceProduitsKeyword_4_0_q.equals(syntax))
				emit_Action_ConnaissanceProduitsKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Action_ObjetsConsommesKeyword_2_0_q.equals(syntax))
				emit_Action_ObjetsConsommesKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Action_ObjetsProduitsKeyword_3_0_q.equals(syntax))
				emit_Action_ObjetsProduitsKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Action___ConnaissanceProduitsKeyword_4_0_or___ObjetsProduitsKeyword_3_0_ConnaissanceProduitsKeyword_4_0____q.equals(syntax))
				emit_Action___ConnaissanceProduitsKeyword_4_0_or___ObjetsProduitsKeyword_3_0_ConnaissanceProduitsKeyword_4_0____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'connaissanceProduits'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'action' '{' 'objetsConsommes'? 'objetsProduits'? (ambiguity) '}' (rule start)
	 *     (rule start) 'action' '{' 'objetsConsommes'? 'objetsProduits'? (ambiguity) qualification+=Qualification
	 *     objetsConsommes+=Objet 'objetsProduits'? (ambiguity) '}' (rule end)
	 *     objetsConsommes+=Objet 'objetsProduits'? (ambiguity) qualification+=Qualification
	 *     objetsProduits+=Objet (ambiguity) '}' (rule end)
	 *     objetsProduits+=Objet (ambiguity) qualification+=Qualification
	 */
	protected void emit_Action_ConnaissanceProduitsKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'objetsConsommes'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'action' '{' (ambiguity) 'objetsProduits' objetsProduits+=Objet
	 *     (rule start) 'action' '{' (ambiguity) 'objetsProduits'? 'connaissanceProduits' connaissanceProduits+=Connaissance
	 *     (rule start) 'action' '{' (ambiguity) 'objetsProduits'? 'connaissanceProduits'? '}' (rule start)
	 *     (rule start) 'action' '{' (ambiguity) 'objetsProduits'? 'connaissanceProduits'? qualification+=Qualification
	 *     (rule start) 'action' '{' (ambiguity) (('objetsProduits' 'connaissanceProduits') | 'connaissanceProduits')? '}' (rule start)
	 */
	protected void emit_Action_ObjetsConsommesKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'objetsProduits'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'action' '{' 'objetsConsommes'? (ambiguity) 'connaissanceProduits' connaissanceProduits+=Connaissance
	 *     (rule start) 'action' '{' 'objetsConsommes'? (ambiguity) 'connaissanceProduits'? '}' (rule start)
	 *     (rule start) 'action' '{' 'objetsConsommes'? (ambiguity) 'connaissanceProduits'? qualification+=Qualification
	 *     objetsConsommes+=Objet (ambiguity) 'connaissanceProduits' connaissanceProduits+=Connaissance
	 *     objetsConsommes+=Objet (ambiguity) 'connaissanceProduits'? '}' (rule end)
	 *     objetsConsommes+=Objet (ambiguity) 'connaissanceProduits'? qualification+=Qualification
	 */
	protected void emit_Action_ObjetsProduitsKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (('objetsProduits' 'connaissanceProduits') | 'connaissanceProduits')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'action' '{' 'objetsConsommes'? (ambiguity) '}' (rule start)
	 */
	protected void emit_Action___ConnaissanceProduitsKeyword_4_0_or___ObjetsProduitsKeyword_3_0_ConnaissanceProduitsKeyword_4_0____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
