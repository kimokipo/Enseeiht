/*
 * generated by Xtext 2.23.0
 */
package fr.n7.serializer;

import com.google.inject.Inject;
import fr.n7.gAME.Chemin;
import fr.n7.gAME.Choix;
import fr.n7.gAME.Condition;
import fr.n7.gAME.Connaissance;
import fr.n7.gAME.Explorateur;
import fr.n7.gAME.GAMEPackage;
import fr.n7.gAME.Game;
import fr.n7.gAME.Interaction;
import fr.n7.gAME.Lieu;
import fr.n7.gAME.Objet;
import fr.n7.gAME.Personne;
import fr.n7.gAME.Qualification;
import fr.n7.gAME.Territoire;
import fr.n7.gAME.Type;
import fr.n7.services.GAMEGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GAMESemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GAMEGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GAMEPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GAMEPackage.ACTION:
				sequence_Action(context, (fr.n7.gAME.Action) semanticObject); 
				return; 
			case GAMEPackage.CHEMIN:
				sequence_Chemin(context, (Chemin) semanticObject); 
				return; 
			case GAMEPackage.CHOIX:
				sequence_Choix(context, (Choix) semanticObject); 
				return; 
			case GAMEPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case GAMEPackage.CONNAISSANCE:
				sequence_Connaissance(context, (Connaissance) semanticObject); 
				return; 
			case GAMEPackage.EXPLORATEUR:
				sequence_Explorateur(context, (Explorateur) semanticObject); 
				return; 
			case GAMEPackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case GAMEPackage.INTERACTION:
				sequence_Interaction(context, (Interaction) semanticObject); 
				return; 
			case GAMEPackage.LIEU:
				sequence_Lieu(context, (Lieu) semanticObject); 
				return; 
			case GAMEPackage.OBJET:
				sequence_Objet(context, (Objet) semanticObject); 
				return; 
			case GAMEPackage.PERSONNE:
				sequence_Personne(context, (Personne) semanticObject); 
				return; 
			case GAMEPackage.QUALIFICATION:
				sequence_Qualification(context, (Qualification) semanticObject); 
				return; 
			case GAMEPackage.TERRITOIRE:
				sequence_Territoire(context, (Territoire) semanticObject); 
				return; 
			case GAMEPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (objetsConsommes+=Objet* objetsProduits+=Objet* connaissanceProduits+=Connaissance* qualification+=Qualification*)
	 */
	protected void sequence_Action(ISerializationContext context, fr.n7.gAME.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chemin returns Chemin
	 *
	 * Constraint:
	 *     (
	 *         etat=EtatChemin 
	 *         predecessor=[Lieu|ID] 
	 *         successor=[Lieu|ID] 
	 *         conditionsVisible=Condition 
	 *         conditionsOuverture=Condition 
	 *         conditionsObligation=Condition 
	 *         objetsTransmis+=Objet* 
	 *         prixObjets+=Objet* 
	 *         qualification+=Qualification*
	 *     )
	 */
	protected void sequence_Chemin(ISerializationContext context, Chemin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Choix returns Choix
	 *
	 * Constraint:
	 *     actions+=Action+
	 */
	protected void sequence_Choix(ISerializationContext context, Choix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (
	 *         val=EBoolean 
	 *         objetsTrue+=[Objet|ID]* 
	 *         objetsFalse+=[Objet|ID]* 
	 *         connaissanceTrue+=[Connaissance|ID]* 
	 *         connaissanceFalse+=[Connaissance|ID]* 
	 *         lieuxExplores+=[Lieu|ID]*
	 *     )
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Connaissance returns Connaissance
	 *
	 * Constraint:
	 *     (name=ID qualification+=Qualification* condition=Condition? etat=EtatVisibilite)
	 */
	protected void sequence_Connaissance(ISerializationContext context, Connaissance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Explorateur returns Explorateur
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         objets+=Objet* 
	 *         connaissances+=Connaissance* 
	 *         lieuCourant=[Lieu|ID] 
	 *         lieuExplores+=[Lieu|ID]* 
	 *         limite=EInt
	 *     )
	 */
	protected void sequence_Explorateur(ISerializationContext context, Explorateur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (name=ID explorateur=Explorateur territoire=Territoire)
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GAMEPackage.Literals.GAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GAMEPackage.Literals.GAME__NAME));
			if (transientValues.isValueTransient(semanticObject, GAMEPackage.Literals.GAME__EXPLORATEUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GAMEPackage.Literals.GAME__EXPLORATEUR));
			if (transientValues.isValueTransient(semanticObject, GAMEPackage.Literals.GAME__TERRITOIRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GAMEPackage.Literals.GAME__TERRITOIRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGameAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGameAccess().getExplorateurExplorateurParserRuleCall_3_0(), semanticObject.getExplorateur());
		feeder.accept(grammarAccess.getGameAccess().getTerritoireTerritoireParserRuleCall_4_0(), semanticObject.getTerritoire());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (choixDebut=Choix choixInter+=Choix* choixFin=Choix condition=Condition)
	 */
	protected void sequence_Interaction(ISerializationContext context, Interaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Lieu returns Lieu
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         personnes+=Personne* 
	 *         objets+=Objet* 
	 *         connaisances+=Connaissance* 
	 *         chemin+=Chemin* 
	 *         qualification+=Qualification*
	 *     )
	 */
	protected void sequence_Lieu(ISerializationContext context, Lieu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Objet returns Objet
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         initVal=EInt 
	 *         taille=EInt 
	 *         etat=EtatVisibilite 
	 *         condition=Condition? 
	 *         qualification+=Qualification*
	 *     )
	 */
	protected void sequence_Objet(ISerializationContext context, Objet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Personne returns Personne
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         activite=EtatActivite 
	 *         conditionsVisible=Condition 
	 *         conditionsObligation=Condition 
	 *         interaction=Interaction 
	 *         qualification+=Qualification*
	 *     )
	 */
	protected void sequence_Personne(ISerializationContext context, Personne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Qualification returns Qualification
	 *
	 * Constraint:
	 *     (texte=EString condition=Condition)
	 */
	protected void sequence_Qualification(ISerializationContext context, Qualification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GAMEPackage.Literals.QUALIFICATION__TEXTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GAMEPackage.Literals.QUALIFICATION__TEXTE));
			if (transientValues.isValueTransient(semanticObject, GAMEPackage.Literals.QUALIFICATION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GAMEPackage.Literals.QUALIFICATION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQualificationAccess().getTexteEStringParserRuleCall_1_0(), semanticObject.getTexte());
		feeder.accept(grammarAccess.getQualificationAccess().getConditionConditionParserRuleCall_3_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Territoire returns Territoire
	 *
	 * Constraint:
	 *     (lieuDepart=Lieu lieux+=Lieu* lieuxFin+=Lieu* chemins+=Chemin*)
	 */
	protected void sequence_Territoire(ISerializationContext context, Territoire semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     texte=EString
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GAMEPackage.Literals.TYPE__TEXTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GAMEPackage.Literals.TYPE__TEXTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getTexteEStringParserRuleCall_0(), semanticObject.getTexte());
		feeder.finish();
	}
	
	
}
