/**
 * generated by Xtext 2.23.0
 */
package fr.n7.gAME.impl;

import fr.n7.gAME.Chemin;
import fr.n7.gAME.Condition;
import fr.n7.gAME.EtatChemin;
import fr.n7.gAME.GAMEPackage;
import fr.n7.gAME.Lieu;
import fr.n7.gAME.Objet;
import fr.n7.gAME.Qualification;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Chemin</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.gAME.impl.CheminImpl#getEtat <em>Etat</em>}</li>
 *   <li>{@link fr.n7.gAME.impl.CheminImpl#getPredecessor <em>Predecessor</em>}</li>
 *   <li>{@link fr.n7.gAME.impl.CheminImpl#getSuccessor <em>Successor</em>}</li>
 *   <li>{@link fr.n7.gAME.impl.CheminImpl#getConditionsVisible <em>Conditions Visible</em>}</li>
 *   <li>{@link fr.n7.gAME.impl.CheminImpl#getConditionsOuverture <em>Conditions Ouverture</em>}</li>
 *   <li>{@link fr.n7.gAME.impl.CheminImpl#getConditionsObligation <em>Conditions Obligation</em>}</li>
 *   <li>{@link fr.n7.gAME.impl.CheminImpl#getObjetsTransmis <em>Objets Transmis</em>}</li>
 *   <li>{@link fr.n7.gAME.impl.CheminImpl#getPrixObjets <em>Prix Objets</em>}</li>
 *   <li>{@link fr.n7.gAME.impl.CheminImpl#getQualification <em>Qualification</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheminImpl extends MinimalEObjectImpl.Container implements Chemin
{
  /**
   * The default value of the '{@link #getEtat() <em>Etat</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEtat()
   * @generated
   * @ordered
   */
  protected static final EtatChemin ETAT_EDEFAULT = EtatChemin.OUVERT;

  /**
   * The cached value of the '{@link #getEtat() <em>Etat</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEtat()
   * @generated
   * @ordered
   */
  protected EtatChemin etat = ETAT_EDEFAULT;

  /**
   * The cached value of the '{@link #getPredecessor() <em>Predecessor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredecessor()
   * @generated
   * @ordered
   */
  protected Lieu predecessor;

  /**
   * The cached value of the '{@link #getSuccessor() <em>Successor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuccessor()
   * @generated
   * @ordered
   */
  protected Lieu successor;

  /**
   * The cached value of the '{@link #getConditionsVisible() <em>Conditions Visible</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionsVisible()
   * @generated
   * @ordered
   */
  protected Condition conditionsVisible;

  /**
   * The cached value of the '{@link #getConditionsOuverture() <em>Conditions Ouverture</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionsOuverture()
   * @generated
   * @ordered
   */
  protected Condition conditionsOuverture;

  /**
   * The cached value of the '{@link #getConditionsObligation() <em>Conditions Obligation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionsObligation()
   * @generated
   * @ordered
   */
  protected Condition conditionsObligation;

  /**
   * The cached value of the '{@link #getObjetsTransmis() <em>Objets Transmis</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjetsTransmis()
   * @generated
   * @ordered
   */
  protected EList<Objet> objetsTransmis;

  /**
   * The cached value of the '{@link #getPrixObjets() <em>Prix Objets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrixObjets()
   * @generated
   * @ordered
   */
  protected EList<Objet> prixObjets;

  /**
   * The cached value of the '{@link #getQualification() <em>Qualification</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQualification()
   * @generated
   * @ordered
   */
  protected EList<Qualification> qualification;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheminImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GAMEPackage.Literals.CHEMIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EtatChemin getEtat()
  {
    return etat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEtat(EtatChemin newEtat)
  {
    EtatChemin oldEtat = etat;
    etat = newEtat == null ? ETAT_EDEFAULT : newEtat;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GAMEPackage.CHEMIN__ETAT, oldEtat, etat));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lieu getPredecessor()
  {
    if (predecessor != null && predecessor.eIsProxy())
    {
      InternalEObject oldPredecessor = (InternalEObject)predecessor;
      predecessor = (Lieu)eResolveProxy(oldPredecessor);
      if (predecessor != oldPredecessor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GAMEPackage.CHEMIN__PREDECESSOR, oldPredecessor, predecessor));
      }
    }
    return predecessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Lieu basicGetPredecessor()
  {
    return predecessor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPredecessor(Lieu newPredecessor)
  {
    Lieu oldPredecessor = predecessor;
    predecessor = newPredecessor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GAMEPackage.CHEMIN__PREDECESSOR, oldPredecessor, predecessor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lieu getSuccessor()
  {
    if (successor != null && successor.eIsProxy())
    {
      InternalEObject oldSuccessor = (InternalEObject)successor;
      successor = (Lieu)eResolveProxy(oldSuccessor);
      if (successor != oldSuccessor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GAMEPackage.CHEMIN__SUCCESSOR, oldSuccessor, successor));
      }
    }
    return successor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Lieu basicGetSuccessor()
  {
    return successor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSuccessor(Lieu newSuccessor)
  {
    Lieu oldSuccessor = successor;
    successor = newSuccessor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GAMEPackage.CHEMIN__SUCCESSOR, oldSuccessor, successor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getConditionsVisible()
  {
    return conditionsVisible;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditionsVisible(Condition newConditionsVisible, NotificationChain msgs)
  {
    Condition oldConditionsVisible = conditionsVisible;
    conditionsVisible = newConditionsVisible;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GAMEPackage.CHEMIN__CONDITIONS_VISIBLE, oldConditionsVisible, newConditionsVisible);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionsVisible(Condition newConditionsVisible)
  {
    if (newConditionsVisible != conditionsVisible)
    {
      NotificationChain msgs = null;
      if (conditionsVisible != null)
        msgs = ((InternalEObject)conditionsVisible).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GAMEPackage.CHEMIN__CONDITIONS_VISIBLE, null, msgs);
      if (newConditionsVisible != null)
        msgs = ((InternalEObject)newConditionsVisible).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GAMEPackage.CHEMIN__CONDITIONS_VISIBLE, null, msgs);
      msgs = basicSetConditionsVisible(newConditionsVisible, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GAMEPackage.CHEMIN__CONDITIONS_VISIBLE, newConditionsVisible, newConditionsVisible));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getConditionsOuverture()
  {
    return conditionsOuverture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditionsOuverture(Condition newConditionsOuverture, NotificationChain msgs)
  {
    Condition oldConditionsOuverture = conditionsOuverture;
    conditionsOuverture = newConditionsOuverture;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GAMEPackage.CHEMIN__CONDITIONS_OUVERTURE, oldConditionsOuverture, newConditionsOuverture);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionsOuverture(Condition newConditionsOuverture)
  {
    if (newConditionsOuverture != conditionsOuverture)
    {
      NotificationChain msgs = null;
      if (conditionsOuverture != null)
        msgs = ((InternalEObject)conditionsOuverture).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GAMEPackage.CHEMIN__CONDITIONS_OUVERTURE, null, msgs);
      if (newConditionsOuverture != null)
        msgs = ((InternalEObject)newConditionsOuverture).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GAMEPackage.CHEMIN__CONDITIONS_OUVERTURE, null, msgs);
      msgs = basicSetConditionsOuverture(newConditionsOuverture, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GAMEPackage.CHEMIN__CONDITIONS_OUVERTURE, newConditionsOuverture, newConditionsOuverture));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getConditionsObligation()
  {
    return conditionsObligation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditionsObligation(Condition newConditionsObligation, NotificationChain msgs)
  {
    Condition oldConditionsObligation = conditionsObligation;
    conditionsObligation = newConditionsObligation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GAMEPackage.CHEMIN__CONDITIONS_OBLIGATION, oldConditionsObligation, newConditionsObligation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionsObligation(Condition newConditionsObligation)
  {
    if (newConditionsObligation != conditionsObligation)
    {
      NotificationChain msgs = null;
      if (conditionsObligation != null)
        msgs = ((InternalEObject)conditionsObligation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GAMEPackage.CHEMIN__CONDITIONS_OBLIGATION, null, msgs);
      if (newConditionsObligation != null)
        msgs = ((InternalEObject)newConditionsObligation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GAMEPackage.CHEMIN__CONDITIONS_OBLIGATION, null, msgs);
      msgs = basicSetConditionsObligation(newConditionsObligation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GAMEPackage.CHEMIN__CONDITIONS_OBLIGATION, newConditionsObligation, newConditionsObligation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Objet> getObjetsTransmis()
  {
    if (objetsTransmis == null)
    {
      objetsTransmis = new EObjectContainmentEList<Objet>(Objet.class, this, GAMEPackage.CHEMIN__OBJETS_TRANSMIS);
    }
    return objetsTransmis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Objet> getPrixObjets()
  {
    if (prixObjets == null)
    {
      prixObjets = new EObjectContainmentEList<Objet>(Objet.class, this, GAMEPackage.CHEMIN__PRIX_OBJETS);
    }
    return prixObjets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Qualification> getQualification()
  {
    if (qualification == null)
    {
      qualification = new EObjectContainmentEList<Qualification>(Qualification.class, this, GAMEPackage.CHEMIN__QUALIFICATION);
    }
    return qualification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GAMEPackage.CHEMIN__CONDITIONS_VISIBLE:
        return basicSetConditionsVisible(null, msgs);
      case GAMEPackage.CHEMIN__CONDITIONS_OUVERTURE:
        return basicSetConditionsOuverture(null, msgs);
      case GAMEPackage.CHEMIN__CONDITIONS_OBLIGATION:
        return basicSetConditionsObligation(null, msgs);
      case GAMEPackage.CHEMIN__OBJETS_TRANSMIS:
        return ((InternalEList<?>)getObjetsTransmis()).basicRemove(otherEnd, msgs);
      case GAMEPackage.CHEMIN__PRIX_OBJETS:
        return ((InternalEList<?>)getPrixObjets()).basicRemove(otherEnd, msgs);
      case GAMEPackage.CHEMIN__QUALIFICATION:
        return ((InternalEList<?>)getQualification()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GAMEPackage.CHEMIN__ETAT:
        return getEtat();
      case GAMEPackage.CHEMIN__PREDECESSOR:
        if (resolve) return getPredecessor();
        return basicGetPredecessor();
      case GAMEPackage.CHEMIN__SUCCESSOR:
        if (resolve) return getSuccessor();
        return basicGetSuccessor();
      case GAMEPackage.CHEMIN__CONDITIONS_VISIBLE:
        return getConditionsVisible();
      case GAMEPackage.CHEMIN__CONDITIONS_OUVERTURE:
        return getConditionsOuverture();
      case GAMEPackage.CHEMIN__CONDITIONS_OBLIGATION:
        return getConditionsObligation();
      case GAMEPackage.CHEMIN__OBJETS_TRANSMIS:
        return getObjetsTransmis();
      case GAMEPackage.CHEMIN__PRIX_OBJETS:
        return getPrixObjets();
      case GAMEPackage.CHEMIN__QUALIFICATION:
        return getQualification();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GAMEPackage.CHEMIN__ETAT:
        setEtat((EtatChemin)newValue);
        return;
      case GAMEPackage.CHEMIN__PREDECESSOR:
        setPredecessor((Lieu)newValue);
        return;
      case GAMEPackage.CHEMIN__SUCCESSOR:
        setSuccessor((Lieu)newValue);
        return;
      case GAMEPackage.CHEMIN__CONDITIONS_VISIBLE:
        setConditionsVisible((Condition)newValue);
        return;
      case GAMEPackage.CHEMIN__CONDITIONS_OUVERTURE:
        setConditionsOuverture((Condition)newValue);
        return;
      case GAMEPackage.CHEMIN__CONDITIONS_OBLIGATION:
        setConditionsObligation((Condition)newValue);
        return;
      case GAMEPackage.CHEMIN__OBJETS_TRANSMIS:
        getObjetsTransmis().clear();
        getObjetsTransmis().addAll((Collection<? extends Objet>)newValue);
        return;
      case GAMEPackage.CHEMIN__PRIX_OBJETS:
        getPrixObjets().clear();
        getPrixObjets().addAll((Collection<? extends Objet>)newValue);
        return;
      case GAMEPackage.CHEMIN__QUALIFICATION:
        getQualification().clear();
        getQualification().addAll((Collection<? extends Qualification>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GAMEPackage.CHEMIN__ETAT:
        setEtat(ETAT_EDEFAULT);
        return;
      case GAMEPackage.CHEMIN__PREDECESSOR:
        setPredecessor((Lieu)null);
        return;
      case GAMEPackage.CHEMIN__SUCCESSOR:
        setSuccessor((Lieu)null);
        return;
      case GAMEPackage.CHEMIN__CONDITIONS_VISIBLE:
        setConditionsVisible((Condition)null);
        return;
      case GAMEPackage.CHEMIN__CONDITIONS_OUVERTURE:
        setConditionsOuverture((Condition)null);
        return;
      case GAMEPackage.CHEMIN__CONDITIONS_OBLIGATION:
        setConditionsObligation((Condition)null);
        return;
      case GAMEPackage.CHEMIN__OBJETS_TRANSMIS:
        getObjetsTransmis().clear();
        return;
      case GAMEPackage.CHEMIN__PRIX_OBJETS:
        getPrixObjets().clear();
        return;
      case GAMEPackage.CHEMIN__QUALIFICATION:
        getQualification().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GAMEPackage.CHEMIN__ETAT:
        return etat != ETAT_EDEFAULT;
      case GAMEPackage.CHEMIN__PREDECESSOR:
        return predecessor != null;
      case GAMEPackage.CHEMIN__SUCCESSOR:
        return successor != null;
      case GAMEPackage.CHEMIN__CONDITIONS_VISIBLE:
        return conditionsVisible != null;
      case GAMEPackage.CHEMIN__CONDITIONS_OUVERTURE:
        return conditionsOuverture != null;
      case GAMEPackage.CHEMIN__CONDITIONS_OBLIGATION:
        return conditionsObligation != null;
      case GAMEPackage.CHEMIN__OBJETS_TRANSMIS:
        return objetsTransmis != null && !objetsTransmis.isEmpty();
      case GAMEPackage.CHEMIN__PRIX_OBJETS:
        return prixObjets != null && !prixObjets.isEmpty();
      case GAMEPackage.CHEMIN__QUALIFICATION:
        return qualification != null && !qualification.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (etat: ");
    result.append(etat);
    result.append(')');
    return result.toString();
  }

} //CheminImpl
