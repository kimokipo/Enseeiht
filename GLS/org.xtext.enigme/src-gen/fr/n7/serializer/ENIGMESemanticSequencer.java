/*
 * generated by Xtext 2.23.0
 */
package fr.n7.serializer;

import com.google.inject.Inject;
import fr.n7.eNIGME.Chemin;
import fr.n7.eNIGME.Choix;
import fr.n7.eNIGME.Condition;
import fr.n7.eNIGME.Connaissance;
import fr.n7.eNIGME.ENIGMEPackage;
import fr.n7.eNIGME.Interaction;
import fr.n7.eNIGME.Jeu;
import fr.n7.eNIGME.Joueur;
import fr.n7.eNIGME.Lieu;
import fr.n7.eNIGME.Objet;
import fr.n7.eNIGME.Personne;
import fr.n7.eNIGME.Qualification;
import fr.n7.eNIGME.Reponse;
import fr.n7.eNIGME.Territoire;
import fr.n7.services.ENIGMEGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ENIGMESemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ENIGMEGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ENIGMEPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ENIGMEPackage.ACTION:
				sequence_Action(context, (fr.n7.eNIGME.Action) semanticObject); 
				return; 
			case ENIGMEPackage.CHEMIN:
				sequence_Chemin(context, (Chemin) semanticObject); 
				return; 
			case ENIGMEPackage.CHOIX:
				sequence_Choix(context, (Choix) semanticObject); 
				return; 
			case ENIGMEPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case ENIGMEPackage.CONNAISSANCE:
				sequence_Connaissance(context, (Connaissance) semanticObject); 
				return; 
			case ENIGMEPackage.INTERACTION:
				sequence_Interaction(context, (Interaction) semanticObject); 
				return; 
			case ENIGMEPackage.JEU:
				sequence_Jeu(context, (Jeu) semanticObject); 
				return; 
			case ENIGMEPackage.JOUEUR:
				sequence_Joueur(context, (Joueur) semanticObject); 
				return; 
			case ENIGMEPackage.LIEU:
				sequence_Lieu(context, (Lieu) semanticObject); 
				return; 
			case ENIGMEPackage.OBJET:
				sequence_Objet(context, (Objet) semanticObject); 
				return; 
			case ENIGMEPackage.PERSONNE:
				sequence_Personne(context, (Personne) semanticObject); 
				return; 
			case ENIGMEPackage.QUALIFICATION:
				sequence_Qualification(context, (Qualification) semanticObject); 
				return; 
			case ENIGMEPackage.REPONSE:
				sequence_Reponse(context, (Reponse) semanticObject); 
				return; 
			case ENIGMEPackage.TERRITOIRE:
				sequence_Territoire(context, (Territoire) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     JeuElement returns Action
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (name=ID objetsconsommables+=[Objet|ID]* objetsattribuables+=[Objet|ID]* connaissancesattribuables+=[Connaissance|ID]*)
	 */
	protected void sequence_Action(ISerializationContext context, fr.n7.eNIGME.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Chemin
	 *     Chemin returns Chemin
	 *
	 * Constraint:
	 *     (
	 *         etatc=EtatChemin 
	 *         conditionc=[Condition|ID] 
	 *         etato=EtatObligation 
	 *         conditiono=[Condition|ID] 
	 *         etatv=EtatVisibilite 
	 *         conditionv=[Condition|ID] 
	 *         precedent=[Lieu|ID] 
	 *         suivant=[Lieu|ID]
	 *     )
	 */
	protected void sequence_Chemin(ISerializationContext context, Chemin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CHEMIN__ETATC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CHEMIN__ETATC));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CHEMIN__CONDITIONC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CHEMIN__CONDITIONC));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CHEMIN__ETATO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CHEMIN__ETATO));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CHEMIN__CONDITIONO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CHEMIN__CONDITIONO));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CHEMIN__ETATV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CHEMIN__ETATV));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CHEMIN__CONDITIONV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CHEMIN__CONDITIONV));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CHEMIN__PRECEDENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CHEMIN__PRECEDENT));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CHEMIN__SUIVANT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CHEMIN__SUIVANT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheminAccess().getEtatcEtatCheminEnumRuleCall_1_0(), semanticObject.getEtatc());
		feeder.accept(grammarAccess.getCheminAccess().getConditioncConditionIDTerminalRuleCall_2_0_1(), semanticObject.eGet(ENIGMEPackage.Literals.CHEMIN__CONDITIONC, false));
		feeder.accept(grammarAccess.getCheminAccess().getEtatoEtatObligationEnumRuleCall_3_0(), semanticObject.getEtato());
		feeder.accept(grammarAccess.getCheminAccess().getConditionoConditionIDTerminalRuleCall_4_0_1(), semanticObject.eGet(ENIGMEPackage.Literals.CHEMIN__CONDITIONO, false));
		feeder.accept(grammarAccess.getCheminAccess().getEtatvEtatVisibiliteEnumRuleCall_5_0(), semanticObject.getEtatv());
		feeder.accept(grammarAccess.getCheminAccess().getConditionvConditionIDTerminalRuleCall_6_0_1(), semanticObject.eGet(ENIGMEPackage.Literals.CHEMIN__CONDITIONV, false));
		feeder.accept(grammarAccess.getCheminAccess().getPrecedentLieuIDTerminalRuleCall_8_0_1(), semanticObject.eGet(ENIGMEPackage.Literals.CHEMIN__PRECEDENT, false));
		feeder.accept(grammarAccess.getCheminAccess().getSuivantLieuIDTerminalRuleCall_10_0_1(), semanticObject.eGet(ENIGMEPackage.Literals.CHEMIN__SUIVANT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Choix
	 *     Choix returns Choix
	 *
	 * Constraint:
	 *     (name=ID reponses+=[Reponse|ID]* conditions+=[Condition|ID]*)
	 */
	protected void sequence_Choix(ISerializationContext context, Choix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Condition
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (name=ID objetsRequis+=[Objet|ID]* connaissancesRequises+=[Connaissance|ID]*)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Connaissance
	 *     Connaissance returns Connaissance
	 *
	 * Constraint:
	 *     (name=ID nomConnaissance=STRING qualification=[Qualification|ID] etatv=EtatVisibilite etatp=EtatPossession)
	 */
	protected void sequence_Connaissance(ISerializationContext context, Connaissance semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CONNAISSANCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CONNAISSANCE__NAME));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CONNAISSANCE__NOM_CONNAISSANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CONNAISSANCE__NOM_CONNAISSANCE));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CONNAISSANCE__QUALIFICATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CONNAISSANCE__QUALIFICATION));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CONNAISSANCE__ETATV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CONNAISSANCE__ETATV));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.CONNAISSANCE__ETATP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.CONNAISSANCE__ETATP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConnaissanceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConnaissanceAccess().getNomConnaissanceSTRINGTerminalRuleCall_2_0(), semanticObject.getNomConnaissance());
		feeder.accept(grammarAccess.getConnaissanceAccess().getQualificationQualificationIDTerminalRuleCall_3_0_1(), semanticObject.eGet(ENIGMEPackage.Literals.CONNAISSANCE__QUALIFICATION, false));
		feeder.accept(grammarAccess.getConnaissanceAccess().getEtatvEtatVisibiliteEnumRuleCall_5_0(), semanticObject.getEtatv());
		feeder.accept(grammarAccess.getConnaissanceAccess().getEtatpEtatPossessionEnumRuleCall_6_0(), semanticObject.getEtatp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Interaction
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (name=ID choix=[Choix|ID] choixFin=[Choix|ID])
	 */
	protected void sequence_Interaction(ISerializationContext context, Interaction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.INTERACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.INTERACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.INTERACTION__CHOIX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.INTERACTION__CHOIX));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.INTERACTION__CHOIX_FIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.INTERACTION__CHOIX_FIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInteractionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInteractionAccess().getChoixChoixIDTerminalRuleCall_3_0_1(), semanticObject.eGet(ENIGMEPackage.Literals.INTERACTION__CHOIX, false));
		feeder.accept(grammarAccess.getInteractionAccess().getChoixFinChoixIDTerminalRuleCall_4_0_1(), semanticObject.eGet(ENIGMEPackage.Literals.INTERACTION__CHOIX_FIN, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Jeu returns Jeu
	 *
	 * Constraint:
	 *     (name=ID jeuelement+=JeuElement*)
	 */
	protected void sequence_Jeu(ISerializationContext context, Jeu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Joueur
	 *     Joueur returns Joueur
	 *
	 * Constraint:
	 *     (name=ID limite=INT objets+=[Objet|ID]* connaissances+=[Connaissance|ID]*)
	 */
	protected void sequence_Joueur(ISerializationContext context, Joueur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Lieu
	 *     Lieu returns Lieu
	 *
	 * Constraint:
	 *     (name=ID personnes+=Personne*)
	 */
	protected void sequence_Lieu(ISerializationContext context, Lieu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Objet
	 *     Objet returns Objet
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         nomObjet=STRING 
	 *         occurrence=INT 
	 *         taille=INT 
	 *         etatv=EtatVisibilite 
	 *         etatp=EtatPossession
	 *     )
	 */
	protected void sequence_Objet(ISerializationContext context, Objet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.OBJET__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.OBJET__NAME));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.OBJET__NOM_OBJET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.OBJET__NOM_OBJET));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.OBJET__OCCURRENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.OBJET__OCCURRENCE));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.OBJET__TAILLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.OBJET__TAILLE));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.OBJET__ETATV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.OBJET__ETATV));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.OBJET__ETATP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.OBJET__ETATP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjetAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObjetAccess().getNomObjetSTRINGTerminalRuleCall_2_0(), semanticObject.getNomObjet());
		feeder.accept(grammarAccess.getObjetAccess().getOccurrenceINTTerminalRuleCall_4_0(), semanticObject.getOccurrence());
		feeder.accept(grammarAccess.getObjetAccess().getTailleINTTerminalRuleCall_8_0(), semanticObject.getTaille());
		feeder.accept(grammarAccess.getObjetAccess().getEtatvEtatVisibiliteEnumRuleCall_10_0(), semanticObject.getEtatv());
		feeder.accept(grammarAccess.getObjetAccess().getEtatpEtatPossessionEnumRuleCall_11_0(), semanticObject.getEtatp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Personne
	 *     Personne returns Personne
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         etato=EtatObligation 
	 *         conditiono=[Condition|ID] 
	 *         etatv=EtatVisibilite 
	 *         conditionv=[Condition|ID] 
	 *         texte=[Qualification|ID] 
	 *         interaction=[Interaction|ID]?
	 *     )
	 */
	protected void sequence_Personne(ISerializationContext context, Personne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Qualification
	 *     Qualification returns Qualification
	 *
	 * Constraint:
	 *     (id=INT qualification=STRING)
	 */
	protected void sequence_Qualification(ISerializationContext context, Qualification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.QUALIFICATION__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.QUALIFICATION__ID));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.QUALIFICATION__QUALIFICATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.QUALIFICATION__QUALIFICATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQualificationAccess().getIdINTTerminalRuleCall_0_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getQualificationAccess().getQualificationSTRINGTerminalRuleCall_1_0(), semanticObject.getQualification());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Reponse
	 *     Reponse returns Reponse
	 *
	 * Constraint:
	 *     (name=ID etat=EtatReponse texte=[Qualification|ID] action=[Action|ID])
	 */
	protected void sequence_Reponse(ISerializationContext context, Reponse semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.REPONSE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.REPONSE__NAME));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.REPONSE__ETAT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.REPONSE__ETAT));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.REPONSE__TEXTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.REPONSE__TEXTE));
			if (transientValues.isValueTransient(semanticObject, ENIGMEPackage.Literals.REPONSE__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ENIGMEPackage.Literals.REPONSE__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReponseAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getReponseAccess().getEtatEtatReponseEnumRuleCall_3_0(), semanticObject.getEtat());
		feeder.accept(grammarAccess.getReponseAccess().getTexteQualificationIDTerminalRuleCall_6_0_1(), semanticObject.eGet(ENIGMEPackage.Literals.REPONSE__TEXTE, false));
		feeder.accept(grammarAccess.getReponseAccess().getActionActionIDTerminalRuleCall_8_0_1(), semanticObject.eGet(ENIGMEPackage.Literals.REPONSE__ACTION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JeuElement returns Territoire
	 *     Territoire returns Territoire
	 *
	 * Constraint:
	 *     (name=ID lieuDebut=Lieu lieuxintermediaires+=Lieu* lieuxFin+=Lieu* chemins+=Chemin*)
	 */
	protected void sequence_Territoire(ISerializationContext context, Territoire semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
